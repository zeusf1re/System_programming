===================== FASM DISASSEMBLE =====================
   0x08049026 <+0>:     mov    $0x4,%eax
   0x0804902b <+5>:     mov    $0x1,%ebx
   0x08049030 <+10>:    mov    $0x8049000,%ecx
   0x08049035 <+15>:    mov    $0x26,%edx
   0x0804903a <+20>:    int    $0x80
   0x0804903c <+22>:    mov    $0x1,%eax
   0x08049041 <+27>:    mov    $0x0,%ebx
   0x08049046 <+32>:    int    $0x80


===================== C DISASSEMBLE =====================
   0x0000117d <+0>:     lea    0x4(%esp),%ecx
   0x00001181 <+4>:     and    $0xfffffff0,%esp
   0x00001184 <+7>:     push   -0x4(%ecx)
   0x00001187 <+10>:    push   %ebp
   0x00001188 <+11>:    mov    %esp,%ebp
   0x0000118a <+13>:    push   %ebx
   0x0000118b <+14>:    push   %ecx
   0x0000118c <+15>:    call   0x11b9 <__x86.get_pc_thunk.ax>
   0x00001191 <+20>:    add    $0x2e63,%eax
   0x00001196 <+25>:    sub    $0xc,%esp
   0x00001199 <+28>:    lea    -0x1fec(%eax),%edx
   0x0000119f <+34>:    push   %edx
   0x000011a0 <+35>:    mov    %eax,%ebx
   0x000011a2 <+37>:    call   0x1040 <puts@plt>
   0x000011a7 <+42>:    add    $0x10,%esp
   0x000011aa <+45>:    mov    $0x0,%eax
   0x000011af <+50>:    lea    -0x8(%ebp),%esp
   0x000011b2 <+53>:    pop    %ecx
   0x000011b3 <+54>:    pop    %ebx
   0x000011b4 <+55>:    pop    %ebp
   0x000011b5 <+56>:    lea    -0x4(%ecx),%esp
   0x000011b8 <+59>:    ret
